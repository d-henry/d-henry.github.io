{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Preacher's Notepad My Portfolio repo link1 repo link2 repo link3 repo link4 Notes on Github Pages Github pages documentation Documentation for Mkdocs with markdown at mkdocs.org","title":"Home"},{"location":"#preachers-notepad","text":"","title":"Preacher's Notepad"},{"location":"#my-portfolio","text":"repo link1 repo link2 repo link3 repo link4","title":"My Portfolio"},{"location":"#notes-on-github-pages","text":"Github pages documentation Documentation for Mkdocs with markdown at mkdocs.org","title":"Notes on Github Pages"},{"location":"about/","text":"About Me I'm Dylan Henry (Preacher is my handle), A Software Engineer, Gamer, Tinkerer, and occasionally for family and friends, an IT guy I made this github page to keep better track of my Portfolio, Projects, and Resources.","title":"About"},{"location":"about/#about-me","text":"I'm Dylan Henry (Preacher is my handle), A Software Engineer, Gamer, Tinkerer, and occasionally for family and friends, an IT guy I made this github page to keep better track of my Portfolio, Projects, and Resources.","title":"About Me"},{"location":"git/","text":"Git Command line Resources Download Git Git Documentation The Git Book Where should I start??? Definitely start with the git book, it's free and comes straight from the source. Why command line??? Using Git from a gui is like riding in a bus, except if you make a mistake without previous experience with the command line all of the sudden you have to drive the bus without having ever driven a vehicle before. Oh, and it's a manual. You are better off just learning how to drive the bus from the getgo rather than put yourself in a stressful situation. I'm a firm believer in just using the command line as much as you can. The basic tasks you will complete every day are simple and easy to learn so why not learn them if it helps you in an emergency? If that's not enough for you maybe it doesn't really matter and I won't be able to convert you to CLI anyway.","title":"Git"},{"location":"git/#git-command-line-resources","text":"Download Git Git Documentation The Git Book","title":"Git Command line Resources"},{"location":"git/#where-should-i-start","text":"Definitely start with the git book, it's free and comes straight from the source.","title":"Where should I start???"},{"location":"git/#why-command-line","text":"Using Git from a gui is like riding in a bus, except if you make a mistake without previous experience with the command line all of the sudden you have to drive the bus without having ever driven a vehicle before. Oh, and it's a manual. You are better off just learning how to drive the bus from the getgo rather than put yourself in a stressful situation. I'm a firm believer in just using the command line as much as you can. The basic tasks you will complete every day are simple and easy to learn so why not learn them if it helps you in an emergency? If that's not enough for you maybe it doesn't really matter and I won't be able to convert you to CLI anyway.","title":"Why command line???"},{"location":"secret/","text":"You found it! The list of hidden pages This Page, The Secret Index todos worknotes","title":"Secret"},{"location":"secret/#you-found-it","text":"","title":"You found it!"},{"location":"secret/#the-list-of-hidden-pages","text":"This Page, The Secret Index todos worknotes","title":"The list of hidden pages"},{"location":"selenium/","text":"Selenium Resources A list of resources, documentation, courses, and tips for selenium test automation. These resources are for both Java and Python. Documentation and links Python Docs Java Docs Selenium Docs Why POM? Sample Projects W.I.P Recommended Reading For Python I recommend the Python crash course (2nd edition) Textbook. For Java i was mostly taught in university classes, however this Is a decent introduction. For Selenium I recommend Tech With Tim's videos for an absolute beginner's introduction They can be found here. Basic Selenium Operations in Python Click an element -- some_button_element.click() Send text to a field -- some_field_element.send_keys(\"text here\") Select an option from a dropdown or select list There are several ways to achieve this, this is just one example. First we find the Select element. in the Sorenson project It would look like this. select_element = self.browser.find_element(*self.SOME_SELECT) Where browser is our WebDriver and *self.SOME_SELECT is our locator reference. Then we create a Select Object and assign the element to it select_object = Select(select_element) Then we can select by visible text select_object.select_by_visible_text(\"some option\") Verify an element (like a checkbox) is enabled. is_enabled = some_element.is_enabled() This will set is_enabled to either true or false, which we can then assert against using pytest assert(is_enabled) Working with Waits to increase test reliability Selenium is renowned for being fragile and inconsistent. I aim to mitigate that as much as possible whenever I'm writing tests. The first thing I do to this end is to use unique id's whenever possible, the second, is to use waits. Here is an example of me accessing an element using a WebDriverWait in Java, which I'll break down and explain. //locate the element WebElement settings_button = (new WebDriverWait(driver, 10)) .until(ExpectedConditions.elementToBeClickable(By.id(\"settings_id\"))); //click the settings button settings_button.click(); Let's break this down... WebElement settings_button = Here i'm declaring a new WebElement object, named settings_button. (New WebDriverWait(driver,10)) This bit is a new WebDriverWait object, into which we pass two parameters, 1. our webDriver and 2. a time to wait (in seconds) for an element to be found. If it takes our driver longer than this time to find the element an exception will be thrown. .until(ExpectedConditions.elementToBeClickable We tell the WebDriverWait to wait until the element is \"clickable\" meaning loaded, displayed, visible, and interactable. (By.id(\"settings_id))); Here we specify our locator type (id) and our desired elements id. settings_button.click(); Finally we are ready to interact with our element. Common issues and roadblocks ElementNotFound Exceptions By far the most common issue you will ever see creating and maintaining Selenium Test Automation and one of the most annoying to try and fix. This exception occurs (usually) when the WebDriver attempts to access or manipulate an element that hasn't yet been loaded into the DOM , or is not displayed. There are several things you should check here. First, is it a timing issue? Selenium has three types of waits built in for us to use, and it's important to understand all three. Explicit wait , typically used as a wait until some condition is true. e.g element to be clickable / visible. Implicit wait , used to wait for any element, this is more of a configuration setting then something you actually do in code. Fluent wait , useful for ignoring exceptions that may arise while waiting, such as ElementNotVisibleException or ElementNotSelectableException For more information on waits, please see the Documentation Why isn't intellisense working for selenium??? This is a problem I ran into, and have yet to solve for python with selenium unless i'm using Pycharm. If i'm using pycharm my solution was to use a Type Hint Otherwise it's most commonly a package / import issue. make sure you followed the correct steps to install selenium for the language you are using and that it has been added to the project in your IDE .","title":"Selenium"},{"location":"selenium/#selenium-resources","text":"A list of resources, documentation, courses, and tips for selenium test automation. These resources are for both Java and Python.","title":"Selenium Resources"},{"location":"selenium/#documentation-and-links","text":"Python Docs Java Docs Selenium Docs Why POM? Sample Projects W.I.P","title":"Documentation and links"},{"location":"selenium/#recommended-reading","text":"For Python I recommend the Python crash course (2nd edition) Textbook. For Java i was mostly taught in university classes, however this Is a decent introduction. For Selenium I recommend Tech With Tim's videos for an absolute beginner's introduction They can be found here.","title":"Recommended Reading"},{"location":"selenium/#basic-selenium-operations-in-python","text":"Click an element -- some_button_element.click() Send text to a field -- some_field_element.send_keys(\"text here\") Select an option from a dropdown or select list There are several ways to achieve this, this is just one example. First we find the Select element. in the Sorenson project It would look like this. select_element = self.browser.find_element(*self.SOME_SELECT) Where browser is our WebDriver and *self.SOME_SELECT is our locator reference. Then we create a Select Object and assign the element to it select_object = Select(select_element) Then we can select by visible text select_object.select_by_visible_text(\"some option\") Verify an element (like a checkbox) is enabled. is_enabled = some_element.is_enabled() This will set is_enabled to either true or false, which we can then assert against using pytest assert(is_enabled)","title":"Basic Selenium Operations in Python"},{"location":"selenium/#working-with-waits-to-increase-test-reliability","text":"Selenium is renowned for being fragile and inconsistent. I aim to mitigate that as much as possible whenever I'm writing tests. The first thing I do to this end is to use unique id's whenever possible, the second, is to use waits. Here is an example of me accessing an element using a WebDriverWait in Java, which I'll break down and explain. //locate the element WebElement settings_button = (new WebDriverWait(driver, 10)) .until(ExpectedConditions.elementToBeClickable(By.id(\"settings_id\"))); //click the settings button settings_button.click(); Let's break this down... WebElement settings_button = Here i'm declaring a new WebElement object, named settings_button. (New WebDriverWait(driver,10)) This bit is a new WebDriverWait object, into which we pass two parameters, 1. our webDriver and 2. a time to wait (in seconds) for an element to be found. If it takes our driver longer than this time to find the element an exception will be thrown. .until(ExpectedConditions.elementToBeClickable We tell the WebDriverWait to wait until the element is \"clickable\" meaning loaded, displayed, visible, and interactable. (By.id(\"settings_id))); Here we specify our locator type (id) and our desired elements id. settings_button.click(); Finally we are ready to interact with our element.","title":"Working with Waits to increase test reliability"},{"location":"selenium/#common-issues-and-roadblocks","text":"ElementNotFound Exceptions By far the most common issue you will ever see creating and maintaining Selenium Test Automation and one of the most annoying to try and fix. This exception occurs (usually) when the WebDriver attempts to access or manipulate an element that hasn't yet been loaded into the DOM , or is not displayed. There are several things you should check here. First, is it a timing issue? Selenium has three types of waits built in for us to use, and it's important to understand all three. Explicit wait , typically used as a wait until some condition is true. e.g element to be clickable / visible. Implicit wait , used to wait for any element, this is more of a configuration setting then something you actually do in code. Fluent wait , useful for ignoring exceptions that may arise while waiting, such as ElementNotVisibleException or ElementNotSelectableException For more information on waits, please see the Documentation","title":"Common issues and roadblocks"},{"location":"selenium/#why-isnt-intellisense-working-for-selenium","text":"This is a problem I ran into, and have yet to solve for python with selenium unless i'm using Pycharm. If i'm using pycharm my solution was to use a Type Hint Otherwise it's most commonly a package / import issue. make sure you followed the correct steps to install selenium for the language you are using and that it has been added to the project in your IDE .","title":"Why isn't intellisense working for selenium???"},{"location":"todos/","text":"Things I need to do here in my markdown pages Selenium project samples / starters in both Java and Python Documentation on my Truenas Scale setup Figure out how to have the repository be private while the pages are public... (private repo, public gh-pages branch) Document how gh-pages works for myself and any friends I'd like to show Document test reporting and CI integration. Document more advanced processes for Selenium (Actions, sliders, verifying states etc.) Create a list/compendium of product recommendations for friends. headphones, keebs, mice, mousepads, pc builds, etc.","title":"Todos"},{"location":"todos/#things-i-need-to-do-here-in-my-markdown-pages","text":"Selenium project samples / starters in both Java and Python Documentation on my Truenas Scale setup Figure out how to have the repository be private while the pages are public... (private repo, public gh-pages branch) Document how gh-pages works for myself and any friends I'd like to show Document test reporting and CI integration. Document more advanced processes for Selenium (Actions, sliders, verifying states etc.) Create a list/compendium of product recommendations for friends. headphones, keebs, mice, mousepads, pc builds, etc.","title":"Things I need to do here in my markdown pages"},{"location":"worknotes/","text":"Notes on projects, processes, and products at the places I work at. This will include setup of test environments, common process notes and FAQ's for myself. TODO here Process of making pull requests we don't hah Process of running tests with selenium grid / links to documentation tests run automatically at night, running during the daytime is easy and I have the documentation bookmarked. Process of getting an environment set up for working / Notes from my initiatory phase This is well documented, no need for notes specific to setup. Freelance opportunities? Upwork, Utest3 Testlio Userfeel (Testlio looks good) Process for creating tests for a Simulation Automate the sim. Manual test on chrome and one other browser (try to set up the mac or chromebook or something.) Enter the manual cases into testrail Report any bugs found into Jira.","title":"Worknotes"},{"location":"worknotes/#notes-on-projects-processes-and-products-at-the-places-i-work-at","text":"This will include setup of test environments, common process notes and FAQ's for myself. TODO here Process of making pull requests we don't hah Process of running tests with selenium grid / links to documentation tests run automatically at night, running during the daytime is easy and I have the documentation bookmarked. Process of getting an environment set up for working / Notes from my initiatory phase This is well documented, no need for notes specific to setup. Freelance opportunities? Upwork, Utest3 Testlio Userfeel (Testlio looks good) Process for creating tests for a Simulation Automate the sim. Manual test on chrome and one other browser (try to set up the mac or chromebook or something.) Enter the manual cases into testrail Report any bugs found into Jira.","title":"Notes on projects, processes, and products at the places I work at."}]}